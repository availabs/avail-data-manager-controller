import _ from "lodash";

export const url =
  "https://eventsearch.xcmdata.org/HistoricalEventSearch/xcmEvent/getEventById";

export const apiResponsePropsToDbCols = {
  ID: "event_id",
  "Event Class": "event_class",
  "Reporting Organization": "reporting_organization",
  "Start DateTime": "start_date_time",
  "End DateTime": "end_date_time",
  "Last Updatedate": "last_updatedate",
  "Close Date": "close_date",
  Estimated_Duration_Mins: "estimated_duration_mins",
  eventDuration: "event_duration",
  Facility: "facility",
  "Event Type": "event_type",
  "Lanes Total Count": "lanes_total_count",
  "Lanes Affected Count": "lanes_affected_count",
  "Lanes Detail": "lanes_detail",
  "Lanes Status": "lanes_status",
  Description: "description",
  Direction: "direction",
  County: "county",
  City: "city",
  "City Article": "city_article",
  "Primary City": "primary_city",
  "Secondary City": "secondary_city",
  PointLAT: "point_lat",
  PointLONG: "point_long",
  "Location Article": "location_article",
  "Primary Marker": "primary_marker",
  "Secondary Marker": "secondary_marker",
  "Primary location": "primary_location",
  "Secondary location": "secondary_location",
  State: "state",
  "Region Closed": "region_closed",
  "Point Datum": "point_datum",
  "Marker Units": "marker_units",
  "Marker Article": "marker_article",
  SummaryDescription: "summary_description",
  Eventstatus: "eventstatus",
  isHighway: "is_highway",
  IconFile: "icon_file",
  StartIncidentOccured: "start_incident_occured",
  StartedAtDateTimeComment: "started_at_date_time_comment",
  IncidentReported: "incident_reported",
  IncidentReportedComment: "incident_reported_comment",
  IncidentVerified: "incident_verified",
  IncidentVerifiedComment: "incident_verified_comment",
  ResponseIdentifiedAndDispatched: "response_identified_and_dispatched",
  ResponseIdentifiedAndDispatchedComment:
    "response_identified_and_dispatched_comment",
  ResponseArrivesonScene: "response_arrives_on_scene",
  ResponseArrivesonSceneComment: "response_arrives_on_scene_comment",
  EndAllLanesOpenToTraffic: "end_all_lanes_open_to_traffic",
  EndedAtDateTimeComment: "ended_at_date_time_comment",
  ResponseDepartsScene: "response_departs_scene",
  ResponseDepartsSceneComment: "response_departs_scene_comment",
  TimeToReturnToNormalFlow: "time_to_return_to_normal_flow",
  TimeToReturnToNormalFlowComment: "time_to_return_to_normal_flow_comment",
  NoOfVehicleInvolved: "no_of_vehicle_involved",
  SecondaryEvent: "secondary_event",
  SecondaryEventTypes: "secondary_event_types",
  SecondaryInvolvements: "secondary_involvements",
  WithinWorkZone: "within_work_zone",
  TruckCommercialVehicleInvolved: "truck_commercial_vehicle_involved",
  ShoulderAvailable: "shoulder_available",
  InjuryInvolved: "injury_involved",
  FatalityInvolved: "fatality_involved",
  MaintanceCrewInvolved: "maintance_crew_involved",
  RoadwayClearance: "roadway_clearance",
  IncidentClearance: "incident_clearance",
  TimeToReturnToNormalFlowDuration: "time_to_return_to_normal_flow_duration",
  Duration: "duration",
  AssociatedImpactIds: "associated_impact_ids",
  SecondaryEventIds: "secondary_event_ids",
  IsTransit: "is_transit",
  IsShoulderLane: "is_shoulder_lane",
  IsTollLane: "is_toll_lane",
  LanesAffectedDetail: "lanes_affected_detail",
  ToFacility: "to_facility",
  ToState: "to_state",
  ToDirection: "to_direction",
  fatalityInvolved_associatedEventID: "fatality_involved_associated_event_id",
  withInWorkZone_associatedEventID: "with_in_work_zone_associated_event_id",
  ToLat: "to_lat",
  ToLon: "to_lon",
  PrimaryDirection: "primary_direction",
  SecondaryDirection: "secondary_direction",
  IsBothDirection: "is_both_direction",
  "Secondary Lanes Affected Count": "secondary_lanes_affected_count",
  "Secondary Lanes Detail": "secondary_lanes_detail",
  "Secondary Lanes Status": "secondary_lanes_status",
  "Secondary Lanes Total Count": "secondary_lanes_total_count",
  SecondaryLanesAffectedDetail: "secondary_lanes_affected_detail",
  EventLocationLatitude: "event_location_latitude",
  EventLocationLongitude: "event_location_longitude",
  tripcnt: "tripcnt",
  Tmclist: "tmclist",
  Recoverytime: "recoverytime",
  Year: "year",
  Datasource: "datasource",
  Datasourcevalue: "datasourcevalue",
  DayofWeek: "day_of_week",
  tmc_geometry: "tmc_geometry",
};

export const dbColsToApiResponseProps = _.invert(apiResponsePropsToDbCols);

export const dbCols = Object.keys(dbColsToApiResponseProps);
