#!/usr/bin/env node

/* eslint-disable @typescript-eslint/no-var-requires */

require("ts-node").register();
require("tsconfig-paths").register();

const yargs = require("yargs/yargs");
const { hideBin } = require("yargs/helpers");
const dedent = require("dedent");

const dama_db = require("data_manager/dama_db").default;
const dama_events = require("data_manager/events").default;
const dama_meta = require("data_manager/meta").default;

const logger = require("data_manager/logger").default;

const dama_host_id = require("constants/damaHostId").default;

const { runInDamaContext } = require("data_manager/contexts");

const { loadLayer } = require("./subtasks");

const getCurrentAuthoritativeView =
  require("../utils/getCurrentAuthoritativeView").default;

const {
  LayerName,
  bridges_dama_source_info,
  bridges_dama_view_info,
} = require("../domain");

const { pg_env, extract_etl_context_id, logging_level } = yargs(
  hideBin(process.argv)
)
  // .usage(
  // // "Usage $0 --pg_env [PostgresSQL Database] --etl_context_id [Etl Context ID]"
  // )
  .strict()
  .options({
    pg_env: {
      alias: "p",
      describe: "The PostgresSQL Database",
      demandOption: true,
    },

    extract_etl_context_id: {
      alias: "x",
      describe: "The ETL Context ID of the extract Task.",
      demandOption: true,
    },

    logging_level: {
      alias: "l",
      describe: "The logging level",
      demandOption: false,
      default: "debug",
      choices: ["error", "warn", "info", "debug", "silly"],
    },
  }).argv;

logger.level = logging_level;

async function main() {
  const etl_context_id = await dama_events.spawnEtlContext(null, null, pg_env);

  logger.info(`==> etl_context_id: ${etl_context_id}`);

  const ctx = {
    meta: { pgEnv: pg_env, etl_context_id },
  };

  await runInDamaContext(ctx, async () => {
    const initial_event = {
      type: "dt-nysdot-bridges/load:INITIAL",
      meta: { dama_host_id, extract_etl_context_id },
    };

    try {
      await dama_events.dispatch(initial_event);

      const extract_events = await dama_events.getAllEtlContextEvents(
        extract_etl_context_id
      );

      const extract_final_event = extract_events.find(({ type }) =>
        /:FINAL$/.test(type)
      );

      if (!extract_final_event) {
        throw new Error(
          `Could not find :FINAL event for extract etl_context_id ${extract_etl_context_id}`
        );
      }

      const {
        payload: { extract_id, layer_names },
      } = extract_final_event;

      if (!layer_names.some((layer_name) => layer_name === LayerName.BRIDGES)) {
        throw new Error(
          `INVARIANT BROKEN: no layer named ${LayerName.BRIDGES}.`
        );
      }

      const load_start_event = {
        type: "dt-nysdot-bridges/load/loadLayer:START",
        payload: {
          layer_name: LayerName.BRIDGES,
        },
      };

      await dama_events.dispatch(load_start_event);

      const load_done_data = await loadLayer(extract_id, LayerName.BRIDGES);

      if (
        load_done_data.table_schema !== bridges_dama_view_info.table_schema ||
        load_done_data.table_name !== bridges_dama_view_info.table_name
      ) {
        const { table_schema, table_name } = bridges_dama_view_info;
        throw new Error(
          `INVARIANT BROKEN: The bridges layer MUST be loaded into ${table_schema}.${table_name}.`
        );
      }

      const load_done_event = {
        type: "dt-nysdot-bridges/load/loadLayer:DONE",
        payload: load_done_data,
      };

      await dama_events.dispatch(load_done_event);

      dama_db.runInTransactionContext(async () => {
        // Create the DamaSource if it does not exist.
        const { name: source_name } = bridges_dama_source_info;

        const { [source_name]: existing_dama_source } =
          await dama_meta.getDamaSourceMetadataByName([source_name]);

        let source_id = existing_dama_source?.source_id ?? null;

        if (source_id === null) {
          const new_dama_source = await dama_meta.createNewDamaSource(
            bridges_dama_source_info
          );

          source_id = new_dama_source.source_id;
        }

        const old_view_id = await getCurrentAuthoritativeView(source_name);

        const new_view = {
          ...bridges_dama_view_info,
          source_id,
        };

        const { view_id: new_view_id } = await dama_meta.createNewDamaView(
          new_view
        );

        const queries = [];

        if (old_view_id) {
          const make_cur_nonauth_sql = dedent(
            `
            UPDATE data_manager.views
              SET
                metadata = jsonb_set(
                             metadata,
                             ARRAY['dama', 'versionLinkedList', 'next'],
                             $1::TEXT::JSONB
                           ),
                active_end_timestamp = NOW()
              WHERE ( view_id = $2 )
          `
          );

          queries.push({
            text: make_cur_nonauth_sql,
            values: [new_view_id, old_view_id],
          });
        }

        const make_new_auth_sql = dedent(
          `
            UPDATE data_manager.views
              SET
                metadata = jsonb_set(
                             COALESCE(metadata, '{ "dama": {} }'::JSONB),
                             ARRAY['dama', 'versionLinkedList'],
                             $1::TEXT::JSONB
                           ),
                active_start_timestamp = NOW()
              WHERE ( view_id = $2 )
          `
        );

        console.log(JSON.stringify({ old_view_id, new_view_id }, null, 4));

        queries.push({
          text: make_new_auth_sql,
          values: [{ previous: old_view_id, next: null }, new_view_id],
        });

        await dama_db.query(queries);

        const final_event = {
          type: "dt-nysdot-bridges/load:FINAL",
          payload: { view_id: new_view_id },
        };

        await dama_events.dispatch(final_event);

        console.log(`LOAD COMPLETE. Created dama_view_id: ${new_view_id}`);
      });
    } catch (err) {
      const { message, stack } = err;

      const error_event = {
        type: "dt-nysdot-bridges/load:ERROR",
        payload: { message, stack },
        error: true,
      };

      dama_events.dispatch(error_event);

      throw err;
    }
  });
}

main();
