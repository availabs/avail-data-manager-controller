#!/usr/bin/env node

/* eslint-disable @typescript-eslint/no-var-requires */

require("ts-node").register();
require("tsconfig-paths").register();

const yargs = require("yargs/yargs");
const { hideBin } = require("yargs/helpers");
const _ = require("lodash");
const dedent = require("dedent");

const dama_db = require("data_manager/dama_db").default;
const dama_events = require("data_manager/events").default;
const dama_gis = require("data_manager/dama_gis").default;

const logger = require("data_manager/logger").default;

const dama_host_id = require("constants/damaHostId").default;

const { runInDamaContext } = require("data_manager/contexts");

const getCurrentAuthoritativeView =
  require("../utils/getCurrentAuthoritativeView").default;

const { bridges_dama_source_info } = require("../domain");

const { pg_env, logging_level } = yargs(hideBin(process.argv))
  .strict()
  .options({
    pg_env: {
      alias: "p",
      describe: "The PostgresSQL Database",
      demandOption: true,
    },

    logging_level: {
      alias: "l",
      describe: "The logging level",
      demandOption: false,
      default: "debug",
      choices: ["error", "warn", "info", "debug", "silly"],
    },
  }).argv;

logger.level = logging_level;

async function main() {
  // If there is not a current authoritative DamaView, we cannot proceed.
  // No use creating an ETL Context.
  const view_id = await getCurrentAuthoritativeView(
    bridges_dama_source_info.name,
    true,
    pg_env
  );

  const etl_context_id = await dama_events.spawnEtlContext(null, null, pg_env);

  logger.info(`==> etl_context_id: ${etl_context_id}`);

  const ctx = {
    meta: { pgEnv: pg_env, etl_context_id },
  };

  await runInDamaContext(ctx, async () => {
    const initial_event = {
      type: "dt-nysdot-bridges/create_mbtiles:INITIAL",
      meta: { dama_host_id, view_id },
    };

    try {
      await dama_events.dispatch(initial_event);

      const done_data = await dama_gis.createGisDatasetViewMbtiles(view_id);

      const mbtiles_meta = _.pick(done_data, [
        "tileset_name",
        "source_id",
        "source_layer_name",
        "source_type",
      ]);

      await dama_db.runInTransactionContext(async () => {
        const update_view_metadata_sql = dedent(`
          UPDATE data_manager.views
            SET metadata = jsonb_set(
                             metadata,
                             ARRAY['dama', 'mbtiles'],
                             $1::TEXT::JSONB
                           )
            WHERE ( view_id = $2 )
        `);

        await dama_db.query({
          text: update_view_metadata_sql,
          values: [mbtiles_meta, view_id],
        });

        const final_event = {
          type: "dt-nysdot-bridges/create_mbtiles:FINAL",
          payload: done_data,
        };

        await dama_events.dispatch(final_event);
      });

      console.log(`MBTiles created.\n${JSON.stringify(mbtiles_meta, null, 4)}`);
    } catch (err) {
      const { message, stack } = err;

      const error_event = {
        type: "dt-nysdot-bridges/create_mbtiles:ERROR",
        payload: { message, stack },
        error: true,
      };

      dama_events.dispatch(error_event);

      throw err;
    }
  });
}

main();
