#!/usr/bin/env node

/* eslint-disable @typescript-eslint/no-var-requires */

require("ts-node").register();
require("tsconfig-paths").register();

const { join, isAbsolute } = require("path");

const yargs = require("yargs/yargs");
const { hideBin } = require("yargs/helpers");

const dedent = require("dedent");

const dama_events = require("data_manager/events").default;
const logger = require("data_manager/logger").default;

const dama_host_id = require("constants/damaHostId").default;

const { runInDamaContext } = require("data_manager/contexts");

const { loadLayer } = require("./subtasks");

// const layers_to_load = ["NHDWaterbody", "NHDLine", "NHDFlowline", "NHDArea"];
const layers_to_load = ["NHDFlowline", "NHDArea"];

const { pg_env, extract_etl_context_id, logging_level } = yargs(
  hideBin(process.argv)
)
  // .usage(
  // // "Usage $0 --pg_env [PostgresSQL Database] --etl_context_id [Etl Context ID]"
  // )
  .strict()
  .options({
    pg_env: {
      alias: "p",
      describe: "The PostgresSQL Database",
      demandOption: true,
    },

    extract_etl_context_id: {
      alias: "x",
      describe: "The ETL Context ID of the extract Task.",
      demandOption: true,
    },

    logging_level: {
      alias: "l",
      describe: "The logging level",
      demandOption: false,
      default: "debug",
      choices: ["error", "warn", "info", "debug", "silly"],
    },
  }).argv;

logger.level = logging_level;

async function main() {
  const etl_context_id = await dama_events.spawnEtlContext(null, null, pg_env);

  logger.info(`==> etl_context_id: ${etl_context_id}`);

  const ctx = {
    meta: { pgEnv: pg_env, etl_context_id },
  };

  await runInDamaContext(ctx, async () => {
    const initial_event = {
      type: "dt-nysdot-bridges/load:INITIAL",
      meta: { dama_host_id, extract_etl_context_id },
    };

    await dama_events.dispatch(initial_event);

    const extract_events = await dama_events.getAllEtlContextEvents(
      extract_etl_context_id
    );

    const extract_final_event = extract_events.find(({ type }) =>
      /:FINAL$/.test(type)
    );

    if (!extract_final_event) {
      throw new Error(
        `Could not find :FINAL event for extract etl_context_id ${extract_etl_context_id}`
      );
    }

    const {
      payload: { extract_id },
    } = extract_final_event;

    const load_done_event_type = "dt-nysdot-bridges/load/loadLayer:DONE";

    for (const layer_name of layers_to_load) {
      if (
        extract_events.includes(
          ({ type, payload }) =>
            type === load_done_event_type && payload.layer_name === layer_name
        )
      ) {
        console.log(`Layer ${layer_name} already loaded.`);
        continue;
      }

      const load_start_event = {
        type: "dt-nysdot-bridges/load/loadLayer:START",
        payload: {
          layer_name,
        },
      };

      await dama_events.dispatch(load_start_event);

      const load_done_data = await loadLayer(extract_id, layer_name);

      const load_done_event = {
        type: load_done_event_type,
        payload: load_done_data,
      };

      await dama_events.dispatch(load_done_event);
    }

    const final_event = {
      type: "dt-nysdot-bridges/load:FINAL",
    };

    await dama_events.dispatch(final_event);

    console.log("LOAD COMPLETE");
  });
}

main();
