#!/usr/bin/env node

require("ts-node").register();
require("tsconfig-paths").register();

const yargs = require("yargs/yargs");
const { hideBin } = require("yargs/helpers");

const dama_events = require("data_manager/events").default;
const logger = require("data_manager/logger").default;
const { runInDamaContext } = require("data_manager/contexts");

const {
  default: etl,
  pg_env_yargs_config,
  logging_level_yargs_config,
} = require("data_utils/gis/etl");

const layer_name = "roadway_inventory_system";

const source_info = {
  name: "nysdot_roadway_inventory_system",
  display_name: "NYSDOT Roadway Inventory System",
};

const view_info = {
  table_schema: "nysdot_roadway_inventory_system",
  table_name: "roadway_inventory_system",
  geography_version: 36,
  publisher: "NYSDOT Engineering Division",
};

function reviseTableDescriptor(table_descriptor) {
  const text_columns = [
    "fips_co",
    "region_co",
    "muni_owner_geocode",
    "urban_area_code_id",
    "hpms_ua_code",
    "ris_divided_area_id",
    "hpms_sample_id",
  ];

  for (const c of text_columns) {
    const column_type = table_descriptor.columnTypes.find(
      ({ col }) => col === c
    );

    column_type.db_type = "TEXT";
  }

  const double_precision_columns = ["section_length"];

  for (const c of double_precision_columns) {
    const column_type = table_descriptor.columnTypes.find(
      ({ col }) => col === c
    );

    column_type.db_type = "DOUBLE PRECISION";
  }

  return table_descriptor;
}

const { pg_env, file_path, logging_level } = yargs(hideBin(process.argv))
  .strict()
  .options({
    file_path: {
      alias: "f",
      describe:
        "The location of the US Census Bureau TIGER/Line Geodatabases ZIP archive.",
      demandOption: true,
    },

    pg_env: pg_env_yargs_config,

    logging_level: logging_level_yargs_config,
  }).argv;

logger.level = logging_level;

const config = {
  file_path,
  layer_name,
  source_info,
  view_info,
  reviseTableDescriptor,
};

async function main() {
  const etl_context_id = await dama_events.spawnEtlContext(null, null, pg_env);

  logger.info(`==> etl_context_id: ${etl_context_id}`);

  await runInDamaContext(
    {
      meta: { pgEnv: pg_env, etl_context_id },
    },
    () => etl(config)
  );
}

main();
