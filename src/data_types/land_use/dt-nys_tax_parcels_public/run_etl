#!/usr/bin/env node

require("ts-node").register();
require("tsconfig-paths").register();

const yargs = require("yargs/yargs");
const { hideBin } = require("yargs/helpers");

const dama_events = require("data_manager/events").default;
const logger = require("data_manager/logger").default;
const { runInDamaContext } = require("data_manager/contexts");

const {
  default: etl,
  pg_env_yargs_config,
  logging_level_yargs_config,
  file_path_yargs_config,
} = require("data_utils/gis/etl");

const layer_name = "NYS_Tax_Parcels_Public";

const source_info = {
  name: "public_tax_parcels",
  display_name: "Tax Parcels (Public)",
};

const view_info = {
  table_schema: "public_tax_parcels",
  table_name: "parcels_2022",
  geography_version: 36,
  source_url:
    "https://data.gis.ny.gov/datasets/sharegisny::nys-tax-parcels-public-1/about",
  publisher: "NYS ITS Geospatatial Services",
};

const { pg_env, file_path, logging_level } = yargs(hideBin(process.argv))
  .strict()
  .options({
    file_path: file_path_yargs_config,
    pg_env: pg_env_yargs_config,
    logging_level: logging_level_yargs_config,
  }).argv;

logger.level = logging_level;

const config = {
  file_path,
  layer_name,
  source_info,
  view_info,
  preserve_text_fields: true,
};

async function main() {
  const etl_context_id = await dama_events.spawnEtlContext(null, null, pg_env);

  logger.info(`==> etl_context_id: ${etl_context_id}`);

  await runInDamaContext(
    {
      meta: { pgEnv: pg_env, etl_context_id },
    },
    () => etl(config)
  );
}

main();
