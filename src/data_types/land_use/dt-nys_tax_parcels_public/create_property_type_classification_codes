#!/usr/bin/env node

require("ts-node").register();
require("tsconfig-paths").register();

const { writeFileSync } = require("fs");
const { inspect } = require("util");
const { join } = require("path");

const dedent = require("dedent");
const cheerio = require("cheerio");
const fetch = require("node-fetch");

const dama_db = require("data_manager/dama_db").default;

const yargs = require("yargs/yargs");
const { hideBin } = require("yargs/helpers");

const dama_events = require("data_manager/events").default;
const logger = require("data_manager/logger").default;
const { runInDamaContext } = require("data_manager/contexts");

const { pg_env_yargs_config } = require("data_utils/gis/etl");

const url =
  "https://www.tax.ny.gov/research/property/assess/manuals/prclas.htm";

const { pg_env } = yargs(hideBin(process.argv)).strict().options({
  pg_env: pg_env_yargs_config,
}).argv;

async function createTable() {
  const sql = dedent(
    `
      CREATE TABLE IF NOT EXISTS public_tax_parcels.property_type_classification_codes (
        code            TEXT PRIMARY KEY,
        type            TEXT NOT NULL,
        description     TEXT
      ) ;
    `
  );

  await dama_db.query(sql, pg_env);
}

async function getCodes() {
  const resp = await fetch(url);
  const text = await resp.text();

  const $ = cheerio.load(text);

  const codes = [];

  const tables = $("table");

  for (const table of tables) {
    const rows = $(table).find("tr");

    const [header] = rows;
    const header_cols = $(header).find("th");

    if (header_cols.length === 3) {
      if (
        ($(header_cols[0]).text() === "Code" &&
          $(header_cols[1]).text() === "Type" &&
          $(header_cols[2]).text() === "Description") ||
        ($(header_cols[0]).text() === "Code" &&
          $(header_cols[1]).text() === "Description" &&
          $(header_cols[2]).text() === "Notes")
      ) {
        const data_rows = rows.slice(1);

        for (const row of data_rows) {
          const [code, type, description] = $(row)
            .find("td")
            .map((_i, elem) => $(elem).text());

          if (!code || !type) {
            continue;
          }

          codes.push({ code, type, description: description || null });
        }
      }
    }
  }

  return codes;
}

async function main() {
  const etl_context_id = await dama_events.spawnEtlContext(null, null, pg_env);

  logger.info(`==> etl_context_id: ${etl_context_id}`);

  await createTable();

  const codes = await getCodes();

  const sql = dedent(
    `
      INSERT INTO public_tax_parcels.property_type_classification_codes (
        code,
        type,
        description
      )
        VALUES ($1, $2, $3)
        ON CONFLICT DO NOTHING
      ;
    `
  );

  for (const { code, type, description } of codes) {
    await dama_db.query(
      { text: sql, values: [code, type, description] },
      pg_env
    );
  }

  await dama_db.query(
    dedent(
      `
        CLUSTER public_tax_parcels.property_type_classification_codes
          USING property_type_classification_codes_pkey
        ;
      `
    ),
    pg_env
  );
}

main();
